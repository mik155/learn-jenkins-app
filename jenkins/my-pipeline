pipeline {
    agent any

    stages {
        stage('Build') {
            agent {
                docker {
                    image 'node:latest'
                    reuseNode true
                }
            }
            steps {
                sh 'ls -la'
                sh 'node --version'
                sh 'npm --version'
                sh 'npm ci'
                sh 'npm run build'
                sh 'ls -la'
            }
        }

        stage ('Run tests')
        {
            parallel{
                stage('JUNIT Test') {
                    agent {
                        docker {
                            image 'node:latest'
                            reuseNode true
                        }
                    }

                    steps {
                        sh 'test -f build/index.html'
                        sh 'npm test'
                    }
                }

                stage('E2E') {
                    agent {
                        docker {
                            image 'mcr.microsoft.com/playwright:v1.39.0-jammy'
                            reuseNode true
                        }
                    }

                    steps {
                        sh 'npm install serve'
                        sh 'node_modules/.bin/serve -s build &'
                        sh 'sleep 10'
                        sh 'npx playwright test --reporter=html'
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'PW HTML Report', reportTitles: '', useWrapperFileDirectly: true])
                    }
                }

            }
        }

        stage ('Deploy') {
            agent {
                docker {
                    image 'node:latest'
                    reuseNode true
                }
            }
            steps {
                sh 'npm install --save-dev netlify-cli'
                sh 'node_modules/.bin/netlify --version'

            }
        }
        

    }
}
